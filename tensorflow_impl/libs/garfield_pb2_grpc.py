# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import garfield_pb2 as garfield__pb2

"""
        GRPC:
                gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment. 
                It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication.
                It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.
"""

"""
        Remote Procedure Call:
        Remote Procedure Call (RPC) is a protocol that one program can use to request
        a service from a program located in another computer on a network without having 
        to understand the network's details. RPC is used to call other processes on the remote systems
        like a local system. A procedure call is also sometimes known as a function call or a subroutine call.
"""

class MessageExchangeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """

        """
                Unary Unary: 
                Unary RPCs where the client sends a single request to the server and gets a single response back,
                just like a normal function call. ... 
                The client reads from the returned stream until there are no more messages.
                gRPC guarantees message ordering within an individual RPC cal
        """
        self.GetModel = channel.unary_unary(
                '/MessageExchange/GetModel',
                request_serializer=garfield__pb2.Request.SerializeToString,
                response_deserializer=garfield__pb2.Model.FromString,
                )
        self.SendModel = channel.unary_unary(
                '/MessageExchange/SendModel',
                request_serializer=garfield__pb2.Model.SerializeToString,
                response_deserializer=garfield__pb2.Response.FromString,
                )
        self.GetGradient = channel.unary_unary(
                '/MessageExchange/GetGradient',
                request_serializer=garfield__pb2.Request.SerializeToString,
                response_deserializer=garfield__pb2.Gradients.FromString,
                )
        self.SendGradient = channel.unary_unary(
                '/MessageExchange/SendGradient',
                request_serializer=garfield__pb2.Gradients.SerializeToString,
                response_deserializer=garfield__pb2.Response.FromString,
                )


class MessageExchangeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendGradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageExchangeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModel,
                    request_deserializer=garfield__pb2.Request.FromString,
                    response_serializer=garfield__pb2.Model.SerializeToString,
            ),
            'SendModel': grpc.unary_unary_rpc_method_handler(
                    servicer.SendModel,
                    request_deserializer=garfield__pb2.Model.FromString,
                    response_serializer=garfield__pb2.Response.SerializeToString,
            ),
            'GetGradient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGradient,
                    request_deserializer=garfield__pb2.Request.FromString,
                    response_serializer=garfield__pb2.Gradients.SerializeToString,
            ),
            'SendGradient': grpc.unary_unary_rpc_method_handler(
                    servicer.SendGradient,
                    request_deserializer=garfield__pb2.Gradients.FromString,
                    response_serializer=garfield__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageExchange', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageExchange(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/GetModel',
            garfield__pb2.Request.SerializeToString,
            garfield__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/SendModel',
            garfield__pb2.Model.SerializeToString,
            garfield__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGradient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/GetGradient',
            garfield__pb2.Request.SerializeToString,
            garfield__pb2.Gradients.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendGradient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchange/SendGradient',
            garfield__pb2.Gradients.SerializeToString,
            garfield__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
